{
  "name": "GameLang",
  "scopeName": "source.gamelang",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#brackets"
    },
    {
      "include": "#semicolons"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.gamelang",
          "match": "#.*$"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.gamelang",
          "match": "\\b(if|else|elif|while|for|in|break|continue|return|pass|fn|class|如果|否则|否则如果|当|循环|返回|函数|类)\\b"
        },
        {
          "name": "keyword.operator.gamelang",
          "match": "\\b(and|or|not)\\b"
        },
        {
          "name": "constant.language.gamelang",
          "match": "\\b(true|false|null)\\b"
        }
      ]
    },
    "brackets": {
      "patterns": [
        {
          "name": "punctuation.definition.block.begin.gamelang",
          "match": "\\{"
        },
        {
          "name": "punctuation.definition.block.end.gamelang",
          "match": "\\}"
        },
        {
          "name": "punctuation.definition.parameters.begin.gamelang",
          "match": "\\("
        },
        {
          "name": "punctuation.definition.parameters.end.gamelang",
          "match": "\\)"
        },
        {
          "name": "punctuation.definition.array.begin.gamelang",
          "match": "\\["
        },
        {
          "name": "punctuation.definition.array.end.gamelang",
          "match": "\\]"
        }
      ]
    },
    "semicolons": {
      "patterns": [
        {
          "name": "punctuation.terminator.statement.gamelang",
          "match": ";"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.gamelang",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.gamelang",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.gamelang",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.gamelang",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.gamelang",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.numeric.float.gamelang",
          "match": "\\b\\d+\\.\\d+\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "support.function.builtin.gamelang",
          "match": "\\b(print|input|len|type|str|int|float|bool|abs|max|min|round|floor|ceil|random|randint|now|sleep|append|pop|get|keys|values|items|open|remove|rename|exists|size|listdir|mkdir|rmdir|getcwd|chdir|system|platform|getenv|search_builtin|ai_ask|打印|输入|长度|类型|字符串|整数|浮点数|布尔值|绝对值|最大值|最小值|四舍五入|总和|随机小数|随机整数|现在时间|暂停|搜索函数|AI问答|列表|字典|集合|排序|反转|枚举|范围|打开文件|读取|写入|关闭)\\b"
        },
        {
          "name": "entity.name.function.gamelang",
          "match": "\\b\\w+(?=\\()"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.gamelang",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
} 