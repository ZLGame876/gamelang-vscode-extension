# GameLang AI集成示例
# 这个文件展示了如何使用GameLang的AI功能

# AI对话系统
fn chatWithAI(message):
    print("🤖 AI助手: 正在处理你的问题...")
    ai_ask(message)
    print("💬 用户:", message)

# 代码生成助手
fn generateCode(description):
    print("🔧 代码生成助手启动...")
    prompt = "请用GameLang语言生成代码：" + description
    ai_ask(prompt)

# 代码审查助手
fn reviewCode(code):
    print("🔍 代码审查助手启动...")
    prompt = "请审查以下GameLang代码并提供改进建议：" + code
    ai_ask(prompt)

# 学习助手
fn learnConcept(topic):
    print("📚 学习助手启动...")
    prompt = "请解释GameLang中的" + topic + "概念"
    ai_ask(prompt)

# 调试助手
fn debugHelp(error):
    print("🐛 调试助手启动...")
    prompt = "我在GameLang中遇到了错误：" + error + "，请帮我解决"
    ai_ask(prompt)

# 示例：使用AI助手
print("=== GameLang AI助手演示 ===")

# 1. 基础对话
chatWithAI("你好，请介绍一下GameLang编程语言")

# 2. 代码生成
generateCode("一个计算斐波那契数列的函数")

# 3. 代码审查
sampleCode = """
fn calculateSum(a, b):
    return a + b
"""
reviewCode(sampleCode)

# 4. 概念学习
learnConcept("函数定义和调用")

# 5. 调试帮助
debugHelp("变量未定义的错误")

# AI编程工作流示例
fn aiProgrammingWorkflow():
    print("\n=== AI编程工作流 ===")
    
    # 第一步：需求分析
    print("1. 需求分析...")
    ai_ask("我想创建一个简单的计算器程序，需要哪些功能？")
    
    # 第二步：设计架构
    print("2. 设计架构...")
    ai_ask("请设计一个GameLang计算器的程序结构")
    
    # 第三步：代码实现
    print("3. 代码实现...")
    ai_ask("请用GameLang实现一个支持加减乘除的计算器")
    
    # 第四步：测试建议
    print("4. 测试建议...")
    ai_ask("如何测试这个计算器程序的正确性？")
    
    # 第五步：优化建议
    print("5. 优化建议...")
    ai_ask("如何优化这个计算器程序的性能和用户体验？")

# 启动AI编程工作流
aiProgrammingWorkflow()

# 智能代码补全示例
fn smartCodeCompletion():
    print("\n=== 智能代码补全示例 ===")
    
    # 模拟用户输入的部分代码
    partialCode = """
    numbers = [1, 2, 3, 4, 5]
    sum = 0
    
    # 用户想要遍历数组求和
    """
    
    print("用户输入的部分代码:")
    print(partialCode)
    
    # AI提供代码补全建议
    ai_ask("请为以下GameLang代码提供完整的实现，用户想要遍历数组求和：" + partialCode)

# 启动智能代码补全
smartCodeCompletion()

print("AI集成示例完成！")
